name: Build and Release OnePlus 10 Pro Kernel

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      make_release:
        description: 'Do you want to create a release?'
        required: true
        type: boolean
        default: false
      ksun_branch:
        description: 'Choose KernelSU Next Branch'
        required: true
        type: choice
        options:
          - stable
          - next
        default: next
      optimize_level:
        description: "Compiler optimization level"
        required: true
        type: choice
        options:
          - O2
          - O3
        default: O2
      susfs_branch_or_commit:
        description: 'Enter SusFS Branch or commit hash for OnePlus 10 Pro'
        type: string
        default: ''

jobs:
  build-op10pro:
    name: Build OnePlus 10 Pro Kernel
    runs-on: ubuntu-latest
    steps:
      - name: Select Appropriate SusFS Branch
        id: get-susfs-branch
        run: |
          SUSFS_BRANCH="${{ inputs.susfs_branch_or_commit }}"
          echo "susfs_branch=$SUSFS_BRANCH" >> $GITHUB_OUTPUT

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Build Kernel
        uses: ./.github/actions
        with:
          model: OP10pro
          soc: waipio
          branch: oneplus/sm8450
          manifest: oneplus_10_pro_v.xml
          ksun_branch: ${{ inputs.ksun_branch }}
          susfs_commit_hash_or_branch: ${{ steps.get-susfs-branch.outputs.susfs_branch }}
          optimize_level: ${{ inputs.optimize_level }}

  trigger-release:
    needs: build-op10pro
    runs-on: ubuntu-latest
    if: ${{ inputs.make_release }}
    env:
      REPO_OWNER: ${{ github.repository_owner }}
      REPO_NAME: ${{ github.event.repository.name }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_NAME: 'OnePlus 10 Pro Kernel with KernelSU Next & SUSFS'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Generate and Create New Tag
        run: |
          BASE_TAG="v1.5.9-r0"
          LATEST_TAG=$(gh api repos/$REPO_OWNER/$REPO_NAME/tags --jq '.[0].name')
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="$BASE_TAG"
          else
            LATEST_TAG=$(printf "%s\n%s\n" "$LATEST_TAG" "$BASE_TAG" | sort -rV | head -n1)
          fi
          NEW_TAG=$(echo "$LATEST_TAG" | awk -F'-r' '{suffix=$2; if (!suffix) suffix=0; suffix++; printf "%s-r%d", $1, suffix}')
          echo "New tag: $NEW_TAG"
          echo "NEW_TAG=${NEW_TAG}" >> $GITHUB_ENV
          git tag $NEW_TAG
          git push origin $NEW_TAG

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./downloaded-artifacts

      - name: Generate Release Notes
        run: |
          cat << EOF > release_notes.md
          OnePlus 10 Pro Kernel Release

          KernelSU Next & SUSFS v1.5.9

          ### Built Device
          | Model | Kernel Version |
          |-------|----------------|
          | OP10pro | $(cat downloaded-artifacts/OP10pro.txt) |

          ### Features
          - [+] KernelSU-Next
          - [+] SUSFS v1.5.9
          - [+] Wireguard Support
          - [+] Maphide LineageOS Detections
          - [+] Magic Mount Support
          - [+] Manual Hooks
          - [+] BBR v1 Support
          EOF

      - name: Create GitHub Release
        run: |
          gh release create "${{ env.NEW_TAG }}" \
            --repo "${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}" \
            --title "${{ env.RELEASE_NAME }}" \
            --notes-file release_notes.md \
            --prerelease

      - name: Upload Release Asset
        run: |
          ZIP_FILE=$(find ./downloaded-artifacts -name "*.zip" -type f)
          if [ -f "$ZIP_FILE" ]; then
            gh release upload "${{ env.NEW_TAG }}" "$ZIP_FILE" --clobber
          fi
name: Build and Release OnePlus 10 Pro Kernel

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      make_release:
        description: 'Do you want to create a release?'
        required: true
        type: boolean
        default: false
      ksun_branch:
        description: 'Choose KernelSU Next Branch'
        required: true
        type: choice
        options:
          - stable
          - next
        default: next
      optimize_level:
        description: "Compiler optimization level"
        required: true
        type: choice
        options:
          - O2
          - O3
        default: O2
      susfs_branch_or_commit:
        description: 'Enter SusFS Branch or commit hash for OnePlus 10 Pro'
        type: string
        default: ''

jobs:
  build-op10pro:
    name: Build OnePlus 10 Pro Kernel
    runs-on: ubuntu-latest
    steps:
      - name: Select Appropriate SusFS Branch
        id: get-susfs-branch
        run: |
          SUSFS_BRANCH="${{ inputs.susfs_branch_or_commit }}"
          echo "susfs_branch=$SUSFS_BRANCH" >> $GITHUB_OUTPUT

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Build Kernel
        uses: ./.github/actions
        with:
          model: OP10pro
          soc: waipio
          branch: oneplus/sm8450
          manifest: oneplus_10_pro_v.xml
          ksun_branch: ${{ inputs.ksun_branch }}
          susfs_commit_hash_or_branch: ${{ steps.get-susfs-branch.outputs.susfs_branch }}
          optimize_level: ${{ inputs.optimize_level }}

  trigger-release:
    needs: build-op10pro
    runs-on: ubuntu-latest
    if: ${{ inputs.make_release }}
    env:
      REPO_OWNER: ${{ github.repository_owner }}
      REPO_NAME: ${{ github.event.repository.name }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_NAME: 'OnePlus 10 Pro Kernel with KernelSU Next & SUSFS'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Generate and Create New Tag
        run: |
          BASE_TAG="v1.5.9-r0"
          LATEST_TAG=$(gh api repos/$REPO_OWNER/$REPO_NAME/tags --jq '.[0].name')
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="$BASE_TAG"
          else
            LATEST_TAG=$(printf "%s\n%s\n" "$LATEST_TAG" "$BASE_TAG" | sort -rV | head -n1)
          fi
          NEW_TAG=$(echo "$LATEST_TAG" | awk -F'-r' '{suffix=$2; if (!suffix) suffix=0; suffix++; printf "%s-r%d", $1, suffix}')
          echo "New tag: $NEW_TAG"
          echo "NEW_TAG=${NEW_TAG}" >> $GITHUB_ENV
          git tag $NEW_TAG
          git push origin $NEW_TAG

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./downloaded-artifacts

      - name: Generate Release Notes
        run: |
          cat << EOF > release_notes.md
          OnePlus 10 Pro Kernel Release

          KernelSU Next & SUSFS v1.5.9

          ### Built Device
          | Model | Kernel Version |
          |-------|----------------|
          | OP10pro | $(cat downloaded-artifacts/OP10pro.txt) |

          ### Features
          - [+] KernelSU-Next
          - [+] SUSFS v1.5.9
          - [+] Wireguard Support
          - [+] Maphide LineageOS Detections
          - [+] Magic Mount Support
          - [+] Manual Hooks
          - [+] BBR v1 Support
          EOF

      - name: Create GitHub Release
        run: |
          gh release create "${{ env.NEW_TAG }}" \
            --repo "${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}" \
            --title "${{ env.RELEASE_NAME }}" \
            --notes-file release_notes.md \
            --prerelease

      - name: Upload Release Asset
        run: |
          ZIP_FILE=$(find ./downloaded-artifacts -name "*.zip" -type f)
          if [ -f "$ZIP_FILE" ]; then
            gh release upload "${{ env.NEW_TAG }}" "$ZIP_FILE" --clobber
          fi
name: Build and Release OnePlus 10 Pro Kernel

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      make_release:
        description: 'Do you want to create a release?'
        required: true
        type: boolean
        default: false
      ksun_branch:
        description: 'Choose KernelSU Next Branch'
        required: true
        type: choice
        options:
          - stable
          - next
        default: next
      optimize_level:
        description: "Compiler optimization level"
        required: true
        type: choice
        options:
          - O2
          - O3
        default: O2
      susfs_branch_or_commit:
        description: 'Enter SusFS Branch or commit hash for OnePlus 10 Pro'
        type: string
        default: ''

jobs:
  build-op10pro:
    name: Build OnePlus 10 Pro Kernel
    runs-on: ubuntu-latest
    steps:
      - name: Select Appropriate SusFS Branch
        id: get-susfs-branch
        run: |
          SUSFS_BRANCH="${{ inputs.susfs_branch_or_commit }}"
          echo "susfs_branch=$SUSFS_BRANCH" >> $GITHUB_OUTPUT

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Build Kernel
        uses: ./.github/actions
        with:
          model: OP10pro
          soc: waipio
          branch: oneplus/sm8450
          manifest: oneplus_10_pro_v.xml
          ksun_branch: ${{ inputs.ksun_branch }}
          susfs_commit_hash_or_branch: ${{ steps.get-susfs-branch.outputs.susfs_branch }}
          optimize_level: ${{ inputs.optimize_level }}

  trigger-release:
    needs: build-op10pro
    runs-on: ubuntu-latest
    if: ${{ inputs.make_release }}
    env:
      REPO_OWNER: ${{ github.repository_owner }}
      REPO_NAME: ${{ github.event.repository.name }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_NAME: 'OnePlus 10 Pro Kernel with KernelSU Next & SUSFS'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Generate and Create New Tag
        run: |
          BASE_TAG="v1.5.9-r0"
          LATEST_TAG=$(gh api repos/$REPO_OWNER/$REPO_NAME/tags --jq '.[0].name')
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="$BASE_TAG"
          else
            LATEST_TAG=$(printf "%s\n%s\n" "$LATEST_TAG" "$BASE_TAG" | sort -rV | head -n1)
          fi
          NEW_TAG=$(echo "$LATEST_TAG" | awk -F'-r' '{suffix=$2; if (!suffix) suffix=0; suffix++; printf "%s-r%d", $1, suffix}')
          echo "New tag: $NEW_TAG"
          echo "NEW_TAG=${NEW_TAG}" >> $GITHUB_ENV
          git tag $NEW_TAG
          git push origin $NEW_TAG

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./downloaded-artifacts

      - name: Generate Release Notes
        run: |
          cat << EOF > release_notes.md
          OnePlus 10 Pro Kernel Release

          KernelSU Next & SUSFS v1.5.9

          ### Built Device
          | Model | Kernel Version |
          |-------|----------------|
          | OP10pro | $(cat downloaded-artifacts/OP10pro.txt) |

          ### Features
          - [+] KernelSU-Next
          - [+] SUSFS v1.5.9
          - [+] Wireguard Support
          - [+] Maphide LineageOS Detections
          - [+] Magic Mount Support
          - [+] Manual Hooks
          - [+] BBR v1 Support
          EOF

      - name: Create GitHub Release
        run: |
          gh release create "${{ env.NEW_TAG }}" \
            --repo "${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}" \
            --title "${{ env.RELEASE_NAME }}" \
            --notes-file release_notes.md \
            --prerelease

      - name: Upload Release Asset
        run: |
          ZIP_FILE=$(find ./downloaded-artifacts -name "*.zip" -type f)
          if [ -f "$ZIP_FILE" ]; then
            gh release upload "${{ env.NEW_TAG }}" "$ZIP_FILE" --clobber
          fi
v
