name: Build
permissions:
  contents: write
  actions: write

inputs:
  model:
    required: true
    type: string
  soc:
    required: true
    type: string
  branch:
    required: true
    type: string
  manifest:
    required: true
    type: string
  android_version:
    required: true
    type: string
  kernel_version:
    required: true
    type: string
  ksun_branch:
    required: true
    type: string
    default: stable
  susfs_branch:
    required: true
    type: string
    default: ""

runs:
  using: "composite"
  steps:
    - name: Setup Build System
      shell: bash
      run: |
        export DEBIAN_FRONTEND=noninteractive
        echo "DEBIAN_FRONTEND=noninteractive" >> $GITHUB_ENV
        
        # Clean up disk space
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/.ghcup || true
        sudo docker image prune --all --force
        
        # Install essential packages
        sudo apt update
        sudo apt install -y python3 python-is-python3 git-core gnupg flex bison build-essential zip \
          curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 lib32ncurses5-dev \
          x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev libxml2-utils xsltproc unzip
        
        # Setup repo tool
        mkdir -p ~/bin
        curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
        chmod a+x ~/bin/repo
        echo "PATH=~/bin:$PATH" >> $GITHUB_ENV
        
        echo "CONFIG=${{ inputs.model }}" >> $GITHUB_ENV

    - name: Clone AnyKernel3 and Dependencies
      shell: bash
      run: |
        git clone https://github.com/asmodeus-oos/AnyKernel3.git -b gki-2.0
        git clone https://github.com/TheWildJames/kernel_patches.git
        
        # Clone SUSFS
        if [[ -z "${{ inputs.susfs_branch }}" ]]; then
          SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"
        else
          SUSFS_BRANCH="${{ inputs.susfs_branch }}"
        fi
        
        git clone https://gitlab.com/simonpunk/susfs4ksu.git
        cd susfs4ksu
        git checkout "$SUSFS_BRANCH" || echo "Warning: Failed to checkout SUSFS branch $SUSFS_BRANCH, using default"

    - name: Get Kernel Source
      shell: bash
      run: |
        mkdir -p "$CONFIG"
        cd "$CONFIG"
        
        # Clone pjgowtham's kernel source
        git clone https://github.com/pjgowtham/android_kernel_oneplus_sm8450.git kernel_platform
        
        cd kernel_platform
        
        # Check if requested branch exists
        if git show-ref --quiet refs/remotes/origin/${{ inputs.branch }}; then
          git checkout ${{ inputs.branch }}
        else
          echo "Using default branch as ${{ inputs.branch }} not found"
          git checkout $(git remote show origin | grep 'HEAD branch' | cut -d' ' -f5)
        fi

        - name: Initialize Repo
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform"
        
        # Initialize minimal repo for dependencies only
        mkdir -p .repo/local_manifests
        
        # Create manifest file without XML declaration
        echo '<manifest>' > .repo/local_manifests/skip-kernel.xml
        echo '  <remove-project name="kernel/msm-*"/>' >> .repo/local_manifests/skip-kernel.xml
        echo '  <remove-project name="kernel/common"/>' >> .repo/local_manifests/skip-kernel.xml
        echo '</manifest>' >> .repo/local_manifests/skip-kernel.xml
        
        # Initialize repo with OnePlus manifest
        repo init -u https://github.com/OnePlusOSS/kernel_manifest.git \
          -b ${{ inputs.branch }} \
          -m ${{ inputs.manifest }} \
          --depth=1 \
          --no-clone-bundle
        
        # Sync only dependencies (skip kernel projects)
        repo sync -c -j$(nproc --all) \
          --no-tags \
          --no-clone-bundle \
          --optimized-fetch \
          --force-sync \
          --detach

    - name: Add KernelSU
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform"
        
        if [ "${{ inputs.ksun_branch }}" == "stable" ]; then
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -
        else
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s ${{ inputs.ksun_branch }}
        fi
        
        git submodule update --init --recursive

    - name: Apply Patches
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform"
        
        # Apply SUSFS patches
        cp ../../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch ./common/
        patch -p1 -d ./common < ./common/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch || true
        
        # Apply other patches
        cp ../../kernel_patches/69_hide_stuff.patch ./common/
        patch -p1 -d ./common < ./common/69_hide_stuff.patch
        
        # KernelSU hooks
        cp ../../kernel_patches/next/scope_min_manual_hooks_v1.4.patch ./common/
        patch -p1 -d ./common < ./common/scope_min_manual_hooks_v1.4.patch

    - name: Configure Kernel
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform"
        
        # Add KernelSU config
        echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_KPROBES_HOOK=n" >> ./common/arch/arm64/configs/gki_defconfig
        
        # Add SUSFS config
        echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        
        # Network optimizations
        echo "CONFIG_TCP_CONG_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_NET_SCH_FQ=y" >> ./common/arch/arm64/configs/gki_defconfig
        
        # Fix version string
        sed -i 's/-dirty//' ./common/scripts/setlocalversion
        sed -i 's/-maybe-dirty//' ./build/kernel/kleaf/impl/stamp.bzl || true

    - name: Build Kernel
      shell: bash
      run: |
        cd "$CONFIG"
        
        # Clean build environment
        sudo sh -c 'sync; echo 3 > /proc/sys/vm/drop_caches'
        
        # Build with appropriate flags
        if [ "${{ inputs.soc }}" == "sun" ]; then
          BUILD_TYPE="perf"
          BAZEL_ARGS=(-g)
        else
          BUILD_TYPE="gki"
          BAZEL_ARGS=()
        fi
        
        if [ -f ./kernel_platform/build_with_bazel.py ]; then
          ./kernel_platform/build_with_bazel.py -t ${{ inputs.soc }} $BUILD_TYPE \
            --jobs=$(nproc --all) \
            --lto=thin \
            "${BAZEL_ARGS[@]}" \
            -o "$(pwd)/out"
        else
          LTO=thin ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ inputs.soc }} "$BUILD_TYPE"
        fi

    - name: Package Kernel
      shell: bash
      run: |
        cd "$CONFIG"
        
        # Copy Image to AnyKernel3
        cp ./out/dist/Image ../AnyKernel3/Image
        
        # Create flashable zip
        cd ../AnyKernel3
        ZIP_NAME="Kernel-${{ inputs.model }}-${{ inputs.android_version }}-$(date +%Y%m%d).zip"
        zip -r9 "../$ZIP_NAME" ./* -x .git README.md *placeholder

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-${{ inputs.model }}
        path: |
          $CONFIG/../*.zip
