name: Build
permissions:
  contents: write
  actions: write

inputs:
  model:
    required: true
    type: string
  soc:
    required: true
    type: string
  branch:
    required: true
    type: string
  manifest:
    required: true
    type: string
  android_version:
    required: true
    type: string
  kernel_version:
    required: true
    type: string
  ksun_branch:
    required: true
    type: string
    default: stable
  susfs_branch:
    required: true
    type: string
    default: ""

runs:
  using: "composite"
  steps:
    - name: Setup Build System
      shell: bash
      run: |
        export DEBIAN_FRONTEND=noninteractive
        echo "DEBIAN_FRONTEND=noninteractive" >> $GITHUB_ENV
        
        df -h
        
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/.ghcup /opt/hostedtoolcache/CodeQL /usr/local/share/powershell /usr/share/swift || true
        sudo docker image prune --all --force
        echo "some directories deleted"
        
        sudo apt-get purge -y \
          aria2 ansible azure-cli shellcheck rpm xorriso zsync \
          esl-erlang firefox gfortran-8 gfortran-9 google-chrome-stable \
          google-cloud-sdk imagemagick \
          libmagickcore-dev libmagickwand-dev libmagic-dev ant ant-optional kubectl \
          mercurial apt-transport-https mono-complete libmysqlclient \
          unixodbc-dev yarn chrpath libssl-dev libxft-dev \
          libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev \
          snmp pollinate libpq-dev postgresql-client powershell ruby-full \
          sphinxsearch subversion mongodb-org microsoft-edge-stable || true
        
        sudo apt-get purge -y $(dpkg-query -W -f='${binary:Package}\n' | grep -E '^mysql|^php|^dotnet') || true
        
        sudo apt-get autoremove -y
        sudo apt-get autoclean -y
        echo "some packages purged"
        
        df -h
        
        sudo apt update
        sudo apt install -y python3 python-is-python3
        
        mkdir -p ./git-repo
        curl -sSL https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
        chmod a+rx ./git-repo/repo
        echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV
        echo "CONFIG=${{ inputs.model }}" >> $GITHUB_ENV

    - name: Clone AnyKernel3 and Other Dependencies
      shell: bash
      run: |
        ANYKERNEL_BRANCH="gki-2.0"
        if [[ -z "${{ inputs.susfs_branch }}" ]]; then
          SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"
        else
          SUSFS_BRANCH="${{ inputs.susfs_branch }}"
        fi
        
        echo "Using branch for AnyKernel3: $ANYKERNEL_BRANCH"
        echo "Using branch for SUSFS: $SUSFS_BRANCH"
        
        git clone https://github.com/asmodeus-oos/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
        git clone https://github.com/TheWildJames/kernel_patches.git
        git clone https://gitlab.com/simonpunk/susfs4ksu.git
        cd susfs4ksu || exit 1
        
        if git rev-parse --verify "origin/$SUSFS_BRANCH" >/dev/null 2>&1 || git rev-parse --verify "$SUSFS_BRANCH" >/dev/null 2>&1 ; then
          git checkout "$SUSFS_BRANCH"
        else
          echo "Error: Branch '$SUSFS_BRANCH' not found"
          exit 1
        fi

    - name: Initialize Kernel Source
      shell: bash
      run: |
        echo "Creating folder for configuration: $CONFIG..."
        mkdir -p "$CONFIG"
        cd "$CONFIG"
        
        echo "Cloning kernel source from pjgowtham/android_kernel_oneplus_sm8450..."
        git clone https://github.com/pjgowtham/android_kernel_oneplus_sm8450.git kernel_platform --depth=1
        
        cd kernel_platform
        
        # Try to checkout requested branch or fallback to default
        if git show-ref --verify --quiet refs/remotes/origin/${{ inputs.branch }}; then
          echo "Checking out specified branch: ${{ inputs.branch }}"
          git checkout ${{ inputs.branch }}
        else
          DEFAULT_BRANCH=$(git remote show origin | grep 'HEAD branch' | cut -d' ' -f5)
          echo "Warning: Branch ${{ inputs.branch }} not found, using default branch: $DEFAULT_BRANCH"
          git checkout $DEFAULT_BRANCH
          echo "CONFIG_BRANCH=$DEFAULT_BRANCH" >> $GITHUB_ENV
        fi
        
        # Initialize minimal repo for dependencies only
        mkdir -p .repo/local_manifests
        cat > .repo/local_manifests/local_manifest.xml <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<manifest>
  <remove-project name="kernel/msm-*" />
  <remove-project name="kernel/common" />
</manifest>
EOF
        
        $REPO init -u https://github.com/OnePlusOSS/kernel_manifest.git -b ${{ inputs.branch }} -m ${{ inputs.manifest }} --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        
        $REPO sync -c --no-clone-bundle --no-tags --optimized-fetch -j$(nproc --all) \
          --detach \
          --force-sync \
          --no-current-branch \
          --prune

    - name: Add KernelSU Next
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform"
        
        if [ "${{ inputs.ksun_branch }}" == "stable" ]; then
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -
        else
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s ${{ inputs.ksun_branch }}
        fi
        
        git submodule update --init --recursive

    - name: Apply SUSFS Patches
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform"
        
        cp ../../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch ./common/
        cp ../../susfs4ksu/kernel_patches/fs/* ./common/fs/
        cp ../../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
        
        cd ./KernelSU-Next
        
        susfs_version=$(grep '#define SUSFS_VERSION' ../common/include/linux/susfs.h | awk -F'"' '{print $2}')
        echo "SUSVER=$susfs_version" >> $GITHUB_ENV
        BASE_VERSION=10200
        cd ./kernel
        KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+" $BASE_VERSION)
        sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" Makefile
        cd ..
        echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
        
        case "$susfs_version" in
          "v1.5.5"|"v1.5.6"|"v1.5.7")
            cp "../../../kernel_patches/next/0001-kernel-implement-susfs-v1.5.5-v1.5.7-KSUN-v1.0.8.patch" "./ksun_susfs_latest.patch"
            ;;
          "v1.5.8")
            cp ../../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
            patch -p1 --forward --fuzz=3 < 10_enable_susfs_for_ksu.patch || true
            cp "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_apk_sign.c.patch" ./
            patch -p1 --forward --fuzz=3 < fix_apk_sign.c.patch
            cp "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_core_hook.c.patch" ./
            patch -p1 --forward --fuzz=3 < fix_core_hook.c.patch
            cp "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_selinux.c.patch" ./
            patch -p1 --forward --fuzz=3 < fix_selinux.c.patch
            cp "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_ksud.c.patch" ./
            patch -p1 --forward --fuzz=3 < fix_ksud.c.patch
            ;;
          "v1.5.9")
            cp ../../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
            patch -p1 --forward < 10_enable_susfs_for_ksu.patch || true
            
            for file in $(find ./kernel -maxdepth 2 -name "*.rej" -printf "%f\n" | cut -d'.' -f1); do
                patch -p1 --forward < "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_$file.c.patch"
            done
            
            patch -p1 --forward < "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_kernel_compat.c.patch"
            ;;
          *)
            echo "Invalid version: $susfs_version"
            exit 1
            ;;
        esac
        patch -p1 --forward < ksun_susfs_latest.patch || true
        
        cd ../common
        
        if [ "${{ inputs.android_version }}" = "android15" ] && [ "${{ inputs.kernel_version }}" = "6.6" ]; then
            if ! grep -qxF '#include <trace/hooks/fs.h>' ./fs/namespace.c; then
                sed -i '/#include <trace\/hooks\/blk.h>/a #include <trace\/hooks\/fs.h>' ./fs/namespace.c
            fi
        fi
        patch -p1 < 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch || true
        
        KERNEL_VERSION="${{ inputs.kernel_version }}"
        MIN_VERSION="5.16"
        
        if [ "$(printf '%s\n' "$KERNEL_VERSION" "$MIN_VERSION" | sort -V | head -n1)" = "$KERNEL_VERSION" ]; then
          patch -p1 -F 3 < "../../../kernel_patches/gki_ptrace.patch"
        fi
        
        if [ "${{ inputs.model }}" == "OPAce5Pro" ] || [ "${{ inputs.model }}" == "OP13" ]; then
          echo 'obj-y += hmbird_patch.o' >> ./drivers/Makefile
          patch -p1 -F 3 < "../../../kernel_patches/oneplus/hmbird/hmbird_kernel_patch.patch"
          cd ./kernel/sched
          rm -rf ext.c ext.h build_policy.c slim.h slim_sysctl.c
          patch -p1 -F 3 < "../../../../../kernel_patches/oneplus/hmbird/hmbird_files_patch.patch"
        fi

    - name: Apply KSUN Hooks
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform/common"
        cp ../../../kernel_patches/next/scope_min_manual_hooks_v1.4.patch ./manual_hooks.patch
        patch -p1 < ./manual_hooks.patch

    - name: Apply Hide Stuff Patches
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform/common"
        cp ../../../kernel_patches/69_hide_stuff.patch ./
        patch -p1 -F 3 < 69_hide_stuff.patch

    - name: Add Configuration Settings
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform"
        
        # KernelSU and SUSFS configs
        echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_KPROBES_HOOK=n" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
        
        # Additional configs
        echo "CONFIG_TMPFS_XATTR=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_TMPFS_POSIX_ACL=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_TCP_CONG_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_TCP_CONG_BIC=n" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_TCP_CONG_WESTWOOD=n" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_TCP_CONG_HTCP=n" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_NET_SCH_FQ=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_NET_SCH_FQ_CODEL=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_IP_NF_TARGET_TTL=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_IP6_NF_TARGET_HL=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_IP6_NF_MATCH_HL=y" >> ./common/arch/arm64/configs/gki_defconfig
        
        # LTO configs
        sed -i 's/CONFIG_LTO=n/CONFIG_LTO=y/' "./common/arch/arm64/configs/gki_defconfig"
        sed -i 's/CONFIG_LTO_CLANG_FULL=y/CONFIG_LTO_CLANG_THIN=y/' "./common/arch/arm64/configs/gki_defconfig"
        sed -i 's/CONFIG_LTO_CLANG_NONE=y/CONFIG_LTO_CLANG_THIN=y/' "./common/arch/arm64/configs/gki_defconfig"

    - name: Modify Build Scripts
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform"
        
        sed -i 's/check_defconfig//' ./common/build.config.gki
        
        # Version string modifications
        tac ./common/scripts/setlocalversion | sed '0,/echo "\$res"/s//res=\$\(echo \$res \| cut -d- -f1-2\)-RMX3301-Asmodeus\;echo "\$res"\;/' | tac > ./common/scripts/setlocalversion.tmp && mv ./common/scripts/setlocalversion.tmp ./common/scripts/setlocalversion
        tac ./msm-kernel/scripts/setlocalversion | sed '0,/echo "\$res"/s//res=\$\(echo \$res \| cut -d- -f1-2\)-RMX3301-Asmodeus\;echo "\$res"\;/' | tac > ./msm-kernel/scripts/setlocalversion.tmp && mv ./msm-kernel/scripts/setlocalversion.tmp ./msm-kernel/scripts/setlocalversion
        tac ./external/dtc/scripts/setlocalversion | sed '0,/echo "\$res"/s//res=\$\(echo \$res \| cut -d- -f1-2\)-RMX3301-Asmodeus\;echo "\$res"\;/' | tac > ./external/dtc/scripts/setlocalversion.tmp && mv ./external/dtc/scripts/setlocalversion.tmp ./external/dtc/scripts/setlocalversion
        
        sed -i 's/echo "${KERNELVERSION}${file_localversion}${config_localversion}${LOCALVERSION}${scm_version}"/echo "${KERNELVERSION}-${{ inputs.android_version }}-OP-Wild"/' ./common/scripts/setlocalversion
        sed -i 's/echo "${KERNELVERSION}${file_localversion}${config_localversion}${LOCALVERSION}${scm_version}"/echo "${KERNELVERSION}-${{ inputs.android_version }}-OP-Wild"/' ./msm-kernel/scripts/setlocalversion
        sed -i 's/echo "${KERNELVERSION}${file_localversion}${config_localversion}${LOCALVERSION}${scm_version}"/echo "${KERNELVERSION}-${{ inputs.android_version }}-OP-Wild"/' ./external/dtc/scripts/setlocalversion
        
        chmod +x ./common/scripts/setlocalversion
        chmod +x ./msm-kernel/scripts/setlocalversion
        chmod +x ./external/dtc/scripts/setlocalversion
        
        sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl || echo "No stamp.bzl!"
        sed -i 's/-dirty//' ./common/scripts/setlocalversion
        sed -i 's/-dirty//' ./msm-kernel/scripts/setlocalversion
        sed -i 's/-dirty//' ./external/dtc/scripts/setlocalversion
        sed -i 's/-dirty//' ./build/kernel/kleaf/workspace_status_stamp.py || echo "No workspace_status_stamp.py!"
        
        sed -i '/echo "LTO $LTO "/i export LTO=thin' ./oplus/build/oplus_setup.sh
        sed -i 's/export REPACK_IMG=true/export REPACK_IMG=false/g' ./oplus/build/oplus_setup.sh
        
        DATESTR=$(date -u)
        perl -pi -e 's{UTS_VERSION="\$\(echo \$UTS_VERSION \$CONFIG_FLAGS \$TIMESTAMP \| cut -b -\$UTS_LEN\)"}{UTS_VERSION="#1 SMP PREEMPT $DATESTR"}' ./common/scripts/mkcompile_h
        perl -pi -e 's{UTS_VERSION="\$\(echo \$UTS_VERSION \$CONFIG_FLAGS \$TIMESTAMP \| cut -b -\$UTS_LEN\)"}{UTS_VERSION="#1 SMP PREEMPT $DATESTR"}' ./msm-kernel/scripts/mkcompile_h

    - name: Build the Kernel
      shell: bash
      run: |
        cd "$CONFIG"
        
        sudo sh -c 'sync; echo 3 > /proc/sys/vm/drop_caches'
        
        rm ./kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
        rm ./kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"
        
        BUILD_TYPE="gki"
        BAZEL_ARGS=(--jobs=$(nproc --all) --lto=thin)
        if [ "${{ inputs.soc }}" == "sun" ]; then
          BUILD_TYPE="perf"
          BAZEL_ARGS+=(-g)
        fi
        
        (stdbuf -oL bash -c '
          while true; do
            echo "=== $(date) ==="
            free -h
            echo "======"
            df -h
            echo "======"
            top -b -n 1 | head -n 15
            echo ""
            sleep 60
          done
        ') &
        MONITOR_PID=$!
        trap "kill $MONITOR_PID" EXIT
        
        if [ -f ./kernel_platform/build_with_bazel.py ]; then
          ./kernel_platform/oplus/bazel/oplus_modules_variant.sh ${{ inputs.soc }} "$BUILD_TYPE" ""
          ./kernel_platform/build_with_bazel.py -t ${{ inputs.soc }} $BUILD_TYPE "${BAZEL_ARGS[@]}" -o "$(pwd)/out"
        else
          LTO=thin ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ inputs.soc }} "$BUILD_TYPE"
        fi

    - name: Create ZIP Files
      id: create_zip
      shell: bash
      run: |
        cd "$CONFIG"
        cp ./out/dist/Image ../AnyKernel3/Image
        
        cd ../AnyKernel3
        
        if [ "${{ inputs.model }}" == "OPAce5Pro" ] || [ "${{ inputs.model }}" == "OP13" ]; then
          cp ../kernel_patches/oneplus/hmbird/bins/* ./tools/
          patch -F 3 < ../kernel_patches/oneplus/hmbird/ak3_hmbird_patch.patch
        fi
        
        ZIP_NAME="AnyKernel3_${{ inputs.model }}_${{ inputs.android_version }}-${{ inputs.kernel_version }}_Next_${{ env.KSUVER }}_SUSFS_${{ env.SUSVER }}.zip"
        zip -r "../$ZIP_NAME" ./*

    - name: Save Build Metadata
      if: success() && steps.create_zip.conclusion == 'success'
      id: save_metadata
      shell: bash
      run: |
        cd "$GITHUB_WORKSPACE"
        if [ -z "$(ls *.zip 2>/dev/null)" ]; then
          echo "No kernel zip found! Artifact upload might be fake."
          exit 1
        fi
        
        cd "$CONFIG/kernel_platform/common"
        CONFIG_FILES=("build.config.common" "build.config.constants")
        BRANCH_LINE=""
        
        for file in "${CONFIG_FILES[@]}"; do
          if [ -f "$file" ]; then
            line=$(grep '^[[:space:]]*BRANCH=' "$file" | head -n1 || true)
            if [ -n "$line" ]; then
              BRANCH_LINE="$line"
              break
            fi
          fi
        done
        
        if [ -z "$BRANCH_LINE" ]; then
          echo "Error: No BRANCH= found in config files"
          exit 1
        fi
        
        BRANCH_VALUE="${BRANCH_LINE#*=}"
        ANDROID_VERSION="${BRANCH_VALUE%-*}"
        
        VERSION=$(grep '^VERSION *=' Makefile | awk '{print $3}')
        PATCHLEVEL=$(grep '^PATCHLEVEL *=' Makefile | awk '{print $3}')
        SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | awk '{print $3}')
        FULL_VERSION="$VERSION.$PATCHLEVEL.$SUBLEVEL"
        
        cd "$GITHUB_WORKSPACE"
        echo "$ANDROID_VERSION-$FULL_VERSION" > ${{ inputs.model }}.txt

    - name: Upload Build Artifacts
      id: upload_ak3_zip
      uses: actions/upload-artifact@v4
      with:
        name: kernel-${{ env.CONFIG }}
        path: |
          ${{ inputs.model }}.txt
          *.zip
