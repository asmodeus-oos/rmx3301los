name: Build Android Kernel

description: |
  Unified build action for Android kernels with optional KernelSU Next or SukiSU Ultra integration,
  AnyKernel3 repackaging, and GitHub release.

inputs:
  model:
    description: "Device model name"
    required: true
  susfs_branch:
    description: "SUSFS branch for patching"
    required: false
    default: main
  branch:
    description: "Kernel branch to checkout"
    required: true
  ksun_branch:
    description: "KernelSU Next or SukiSU Ultra branch to use"
    required: false
    default: main
  root_type:
    description: "Root integration type: 'next' or 'ultra'"
    required: false
    default: next
  android_version:
    description: "Android version (e.g., 14)"
    required: true
  soc:
    description: "SoC platform (e.g., sm8250)"
    required: true
  config_path:
    description: "Relative path to kernel config directory"
    required: true
  ksuversion:
    description: "KernelSU or SukiSU version to use"
    required: false
    default: latest
  release_tag:
    description: "GitHub release tag (e.g., v1.0)"
    required: true
  release_name:
    description: "GitHub release name"
    required: true
  release_body:
    description: "GitHub release body/notes"
    required: false
    default: "Automated kernel build."

runs:
  using: "composite"
  steps:
    - name: Set up environment variables
      shell: bash
      run: |
        echo "CONFIG=${{ inputs.config_path }}" >> $GITHUB_ENV
        echo "KSUVER=${{ inputs.ksuversion }}" >> $GITHUB_ENV

    - name: Checkout source
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y git curl bc bison flex libssl-dev zip

    - name: Apply SUSFS patches (if branch set)
      if: ${{ inputs.susfs_branch != '' }}
      shell: bash
      run: |
        echo "Applying SUSFS patches from branch: ${{ inputs.susfs_branch }}"
        cd "${{ env.CONFIG }}/kernel_platform"
        git fetch origin "${{ inputs.susfs_branch }}"
        git cherry-pick FETCH_HEAD || true

    - name: Add Root Integration (KernelSU Next / SukiSU Ultra)
      shell: bash
      run: |
        echo "Changing to configuration directory: $CONFIG..."
        cd "$CONFIG/kernel_platform"

        if [ "${{ inputs.root_type }}" = "next" ]; then
          echo "Adding KernelSU Next from branch: ${{ inputs.ksun_branch }}"
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s ${{ inputs.ksun_branch }}
        elif [ "${{ inputs.root_type }}" = "ultra" ]; then
          echo "Adding SukiSU Ultra..."
          if [ "${{ inputs.ksun_branch }}" = "stable" ]; then
            curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/Ultra/kernel/setup.sh" | bash -
          else
            curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/Ultra/kernel/setup.sh" | bash -s ${{ inputs.ksun_branch }}
          fi
        else
          echo "No valid root_type provided. Skipping root integration."
        fi

    - name: Build Kernel
      shell: bash
      run: |
        echo "Starting kernel build for ${{ inputs.model }}..."
        cd "$CONFIG/kernel_platform"
        make -j$(nproc)

    - name: Clone AnyKernel3
      shell: bash
      run: |
        echo "Cloning AnyKernel3..."
        git clone https://github.com/osm0sis/AnyKernel3.git AnyKernel3

    - name: Package Kernel with AnyKernel3
      shell: bash
      run: |
        echo "Copying kernel output to AnyKernel3..."
        cp "$CONFIG/kernel_platform/out/arch/arm64/boot/Image"* AnyKernel3/
        cp "$CONFIG/kernel_platform/out/arch/arm64/boot/dtb"* AnyKernel3/ || true
        cp "$CONFIG/kernel_platform/out/arch/arm64/boot/dtbo"* AnyKernel3/ || true
        cd AnyKernel3
        zip -r9 "../${{ inputs.model }}-kernel.zip" ./*

    - name: Upload Kernel Artifact
      uses: actions/upload-artifact@v4
      with:
        name: "${{ inputs.model }}-kernel"
        path: "${{ inputs.model }}-kernel.zip"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ inputs.release_tag }}
        name: ${{ inputs.release_name }}
        body: ${{ inputs.release_body }}
        files: "${{ inputs.model }}-kernel.zip"
      env:
        GITHUB_TOKEN: ${{ github.token }}
