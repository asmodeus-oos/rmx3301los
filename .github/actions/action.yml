name: Build and Release OnePlus 10 Pro Kernel

permissions:
  contents: write
  actions: write

inputs:
  branch:
    required: true
    type: string
  manifest:
    required: true
    type: string
  ksun_branch:
    required: true
    type: string
    default: stable
  susfs_commit_hash_or_branch:
    required: false
    type: string
    default: ""
  optimize_level:
    required: false
    type: string
    default: O2  # Choices: O2 or O3

outputs:
  kernel_version:
    value: ${{ steps.save_metadata.outputs.kernel_version }}
  ksu_version:
    value: ${{ steps.save_metadata.outputs.ksu_version }}
  susfs_version:
    value: ${{ steps.save_metadata.outputs.susfs_version }}
  image_sha256:
    value: ${{ steps.collect_stats.outputs.image_sha256 }}
  warnings:
    value: ${{ steps.collect_stats.outputs.warnings }}

runs:
  using: composite
  steps:
    - name: Validate Inputs
      shell: bash
      run: |
        set -euo pipefail
        echo "Input validation OK."

    - name: Install Minimal Dependencies
      shell: bash
      run: |
        set -euo pipefail
        sudo apt-get -o Acquire::Retries=3 update -qq
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
          git curl ca-certificates build-essential clang lld flex bison \
          libelf-dev libssl-dev libncurses-dev zlib1g-dev liblz4-tool \
          libxml2-utils rsync unzip dwarves file python3
        sudo apt-get clean

    - name: Setup Base Environment
      shell: bash
      run: |
        set -euo pipefail
        CONFIG="OP10Pro"
        echo "CONFIG=$CONFIG" >> "$GITHUB_ENV"
        REPO="/usr/local/bin/repo"
        if [ ! -x "$REPO" ]; then
          curl -s https://storage.googleapis.com/git-repo-downloads/repo -o "$REPO"
          chmod +x "$REPO"
        fi
        echo "REPO=$REPO" >> "$GITHUB_ENV"

    - name: Initialize and Sync Kernel Source
      shell: bash
      run: |
        set -euo pipefail
        mkdir -p "$CONFIG" && cd "$CONFIG"
        if [[ "${{ inputs.manifest }}" == https://* ]]; then
          mkdir -p .repo/manifests
          curl -fsSL "${{ inputs.manifest }}" -o .repo/manifests/temp_manifest.xml
          "$REPO" init -u https://github.com/OnePlusOSS/kernel_manifest.git \
            -b oneplus/sm8450 -m temp_manifest.xml --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        else
          "$REPO" init -u https://github.com/OnePlusOSS/kernel_manifest.git \
            -b "${{ inputs.branch }}" -m "${{ inputs.manifest }}" \
            --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        fi
        success=false
        for i in 1 2 3; do
          if "$REPO" sync -c --no-clone-bundle --no-tags --optimized-fetch -j"$(nproc)" --fail-fast; then
            success=true
            break
          fi
          sleep 30
        done
        $success || { echo "repo sync failed after 3 attempts"; exit 1; }

    - name: Get Kernel Version Info
      shell: bash
      run: |
        set -euo pipefail
        CONFIG_DIR="$GITHUB_WORKSPACE/$CONFIG"
        ARTIFACTS_DIR="$CONFIG_DIR/artifacts"
        mkdir -p "$ARTIFACTS_DIR"
        cd "$CONFIG_DIR/kernel_platform/common"
        BRANCH_VALUE=$(grep '^[[:space:]]*BRANCH=' build.config.common | cut -d= -f2)
        ANDROID_VERSION="${BRANCH_VALUE%-*}"
        VERSION=$(grep '^VERSION *=' Makefile | awk '{print $3}')
        PATCHLEVEL=$(grep '^PATCHLEVEL *=' Makefile | awk '{print $3}')
        SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | awk '{print $3}')
        FULL_VERSION="$VERSION.$PATCHLEVEL.$SUBLEVEL"
        echo "$ANDROID_VERSION-$FULL_VERSION" > "$ARTIFACTS_DIR/$CONFIG.txt"
        echo "ANDROID_VER=$ANDROID_VERSION" >> "$GITHUB_ENV"
        echo "KERNEL_VER=$VERSION.$PATCHLEVEL" >> "$GITHUB_ENV"
        echo "KERNEL_FULL_VER=$ANDROID_VERSION-$FULL_VERSION" >> "$GITHUB_ENV"
        echo "SUSFS_KERNEL_BRANCH=gki-$ANDROID_VERSION-$VERSION.$PATCHLEVEL" >> "$GITHUB_ENV"

    - name: Clone AnyKernel3 and Other Dependencies
      shell: bash
      run: |
        set -euo pipefail
        ANYKERNEL_BRANCH="gki-2.0"
        SUSFS_BRANCH="${{ inputs.susfs_commit_hash_or_branch:-${{ env.SUSFS_KERNEL_BRANCH }}}}"
        git clone --depth=1 https://github.com/TheWildJames/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
        git clone https://gitlab.com/simonpunk/susfs4ksu.git
        cd susfs4ksu
        git checkout "$SUSFS_BRANCH" || { echo "SUSFS branch '$SUSFS_BRANCH' not found"; exit 1; }

    - name: Add KernelSU Next
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform"
        if [ "${{ inputs.ksun_branch }}" = "stable" ]; then
          curl -fsSL https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh | bash -
        else
          curl -fsSL https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh | bash -s "${{ inputs.ksun_branch }}"
        fi
        git submodule update --init --recursive

    - name: Apply SUSFS Patches
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform"
        cp ../../susfs4ksu/kernel_patches/fs/* ./common/fs/
        cp ../../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
        cd KernelSU-Next
        SUSVER=$(grep '#define SUSFS_VERSION' ../common/include/linux/susfs.h | awk -F'"' '{print $2}')
        echo "SUSVER=$SUSVER" >> $GITHUB_ENV
        BASE_VERSION=10200
        cd kernel
        KSUVER=$(expr $(git rev-list --count HEAD) + $BASE_VERSION)
        sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSUVER}/" Makefile
        echo "KSUVER=$KSUVER" >> $GITHUB_ENV

    - name: Configure Kernel
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform/common"
        cat >> arch/arm64/configs/gki_defconfig <<EOF
        CONFIG_KSU=y
        CONFIG_KSU_SUSFS=y
        CONFIG_TCP_CONG_BBR=y
        CONFIG_IP_NF_TARGET_TTL=y
        CONFIG_LTO_CLANG=y
        CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y
        EOF

    - name: Detect Clang
      shell: bash
      run: |
        set -euo pipefail
        KP="$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
        CLANG_BIN="$(ls -d "$KP"/prebuilts/clang/host/linux-x86/clang-r*/bin 2>/dev/null | sort -V | tail -n1)"
        [ -x "$CLANG_BIN/clang" ] || { echo "No clang found"; exit 1; }
        echo "CLANG_BIN_PATH=$CLANG_BIN" >> "$GITHUB_ENV"

    - name: Build Kernel
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform/common"
        mkdir -p out
        export PATH="$CLANG_BIN_PATH:$PATH"
        export ARCH=arm64 SUBARCH=arm64
        export CROSS_COMPILE=aarch64-linux-android-
        export CC=clang
        if [ "${{ inputs.optimize_level }}" = "O3" ]; then
          export KCFLAGS="-O3 -fno-stack-protector"
        else
          export KCFLAGS="-O2 -fno-stack-protector"
        fi
        make O=out gki_defconfig
        make -j"$(nproc)" O=out 2>&1 | tee build.log
        sha256sum out/arch/arm64/boot/Image | tee out/Image.sha256

    - name: Collect Stats
      id: collect_stats
      shell: bash
      run: |
        set -euo pipefail
        OUT="$CONFIG/kernel_platform/common/out"
        WARNINGS=$(grep -i warning "$CONFIG/kernel_platform/common/build.log" | wc -l || true)
        IMAGE_SHA256=$(cut -d' ' -f1 "$OUT/Image.sha256")
        echo "warnings=$WARNINGS" >> "$GITHUB_OUTPUT"
        echo "image_sha256=$IMAGE_SHA256" >> "$GITHUB_OUTPUT"

    - name: Save Metadata
      id: save_metadata
      shell: bash
      run: |
        echo "kernel_version=${{ env.KERNEL_FULL_VER }}" >> "$GITHUB_OUTPUT"
        echo "ksu_version=${KSUVER:-unknown}" >> "$GITHUB_OUTPUT"
        echo "susfs_version=${SUSVER:-unknown}" >> "$GITHUB_OUTPUT"

    - name: Create Kernel ZIP
      shell: bash
      run: |
        cp "$CONFIG/kernel_platform/common/out/arch/arm64/boot/Image" AnyKernel3/Image
        cd AnyKernel3
        ZIP_NAME="AnyKernel3_OP10Pro_${{ env.KERNEL_FULL_VER }}_Next_${KSUVER}_${SUSVER}.zip"
        zip -r "../$CONFIG/artifacts/$ZIP_NAME" ./*
        echo "zip_name=$ZIP_NAME" >> "$GITHUB_OUTPUT"

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-$CONFIG
        path: $CONFIG/artifacts/
